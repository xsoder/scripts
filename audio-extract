#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Default settings
OUTPUT_DIR="$HOME/media/extracted_audio"
EXTRACT_ALL=false
CONVERT_TO_WAV=false
KEEP_ORIGINAL=true
VERBOSE=false

# Function to print usage
usage() {
    echo -e "${BLUE}Universal Audio Extractor${NC}"
    echo ""
    echo "Usage: $0 [OPTIONS] [FILES...]"
    echo ""
    echo "Supported formats: VOB, AOB, MKV, MP4, AVI, MOV, WMV, FLV, WebM"
    echo ""
    echo "Options:"
    echo "  -o, --output DIR     Output directory (default: extracted_audio)"
    echo "  -a, --all           Extract all audio streams"
    echo "  -w, --wav           Convert to WAV format"
    echo "  -r, --remove        Remove original files after extraction"
    echo "  -v, --verbose       Verbose output"
    echo "  -h, --help          Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 movie.mkv                    # Extract first audio stream"
    echo "  $0 -a *.mp4                     # Extract all streams from all MP4 files"
    echo "  $0 -w -o audio_files movie.vob  # Convert to WAV in custom directory"
    echo "  $0 -a -w *.mkv *.mp4            # Extract all streams as WAV"
}

# Function to check dependencies
check_dependencies() {
    if ! command -v ffmpeg &> /dev/null; then
        echo -e "${RED}Error: ffmpeg is not installed${NC}"
        echo "Please install ffmpeg first:"
        echo "  Ubuntu/Debian: sudo apt install ffmpeg"
        echo "  macOS: brew install ffmpeg"
        echo "  Windows: Download from https://ffmpeg.org/"
        exit 1
    fi
}

# Function to analyze file and get audio stream info
analyze_file() {
    local file="$1"
    echo -e "${BLUE}Analyzing: $file${NC}"
    
    # Get stream information
    local streams=$(ffmpeg -i "$file" -hide_banner 2>&1 | grep "Stream.*Audio" || true)
    
    if [ -z "$streams" ]; then
        echo -e "${YELLOW}No audio streams found in $file${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Audio streams found:${NC}"
    echo "$streams" | nl -v 0
    echo ""
    
    return 0
}

# Function to extract audio stream
extract_audio() {
    local input_file="$1"
    local stream_index="$2"
    local output_file="$3"
    local codec="$4"
    
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}Extracting stream $stream_index from $input_file${NC}"
        echo -e "${BLUE}Output: $output_file${NC}"
        echo -e "${BLUE}Codec: $codec${NC}"
    fi
    
    if [ "$CONVERT_TO_WAV" = true ]; then
        # Convert to WAV
        if [ "$VERBOSE" = true ]; then
            ffmpeg -i "$input_file" -map "0:$stream_index" -c:a pcm_s16le -ar 48000 "$output_file" -y
        else
            ffmpeg -i "$input_file" -map "0:$stream_index" -c:a pcm_s16le -ar 48000 "$output_file" -y 2>/dev/null
        fi
    else
        # Copy without re-encoding
        if [ "$VERBOSE" = true ]; then
            ffmpeg -i "$input_file" -map "0:$stream_index" -c:a copy "$output_file" -y
        else
            ffmpeg -i "$input_file" -map "0:$stream_index" -c:a copy "$output_file" -y 2>/dev/null
        fi
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Successfully extracted: $(basename "$output_file")${NC}"
    else
        echo -e "${RED}✗ Failed to extract stream $stream_index from $input_file${NC}"
        return 1
    fi
}

# Function to get audio codec from stream info
get_audio_codec() {
    local file="$1"
    local stream_index="$2"
    
    local codec=$(ffprobe -v quiet -select_streams "a:$stream_index" -show_entries stream=codec_name -of csv=p=0 "$file" 2>/dev/null || echo "unknown")
    echo "$codec"
}

# Function to get appropriate file extension
get_extension() {
    local codec="$1"
    
    if [ "$CONVERT_TO_WAV" = true ]; then
        echo "wav"
        return
    fi
    
    case "$codec" in
        "dts"|"dca") echo "dts" ;;
        "ac3") echo "ac3" ;;
        "eac3") echo "eac3" ;;
        "pcm_s16le"|"pcm_s24le"|"pcm_s32le") echo "wav" ;;
        "mp2") echo "mp2" ;;
        "mp3") echo "mp3" ;;
        "aac") echo "aac" ;;
        "opus") echo "opus" ;;
        "vorbis") echo "ogg" ;;
        "flac") echo "flac" ;;
        "truehd") echo "thd" ;;
        *) echo "audio" ;;
    esac
}

# Function to check if file is a supported video format
is_supported_format() {
    local file="$1"
    case "${file,,}" in
        *.vob|*.aob|*.mkv|*.mp4|*.avi|*.mov|*.wmv|*.flv|*.webm|*.m4v|*.3gp|*.ts|*.mts|*.m2ts)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Function to process a single file
process_file() {
    local file="$1"
    
    # Check if file exists and is readable
    if [ ! -f "$file" ] || [ ! -r "$file" ]; then
        echo -e "${RED}Error: Cannot read file $file${NC}"
        return 1
    fi
    
    # Analyze file first
    if ! analyze_file "$file"; then
        return 1
    fi
    
    # Get base name without extension
    local basename=$(basename "$file" | sed 's/\.[^.]*$//')
    
    # Get number of audio streams
    local audio_streams=$(ffprobe -v quiet -select_streams a -show_entries stream=index -of csv=p=0 "$file" 2>/dev/null | wc -l)
    
    if [ "$audio_streams" -eq 0 ]; then
        echo -e "${YELLOW}No audio streams found in $file${NC}"
        return 1
    fi
    
    if [ "$EXTRACT_ALL" = true ]; then
        # Extract all audio streams
        for i in $(seq 0 $((audio_streams - 1))); do
            local codec=$(get_audio_codec "$file" "$i")
            local ext=$(get_extension "$codec")
            local output_file="$OUTPUT_DIR/${basename}_track_${i}.${ext}"
            
            extract_audio "$file" "a:$i" "$output_file" "$codec"
        done
    else
        # Extract only first audio stream
        local codec=$(get_audio_codec "$file" "0")
        local ext=$(get_extension "$codec")
        local output_file="$OUTPUT_DIR/${basename}.${ext}"
        
        extract_audio "$file" "a:0" "$output_file" "$codec"
    fi
    
    # Remove original file if requested
    if [ "$KEEP_ORIGINAL" = false ]; then
        echo -e "${YELLOW}Removing original file: $file${NC}"
        rm "$file"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -a|--all)
            EXTRACT_ALL=true
            shift
            ;;
        -w|--wav)
            CONVERT_TO_WAV=true
            shift
            ;;
        -r|--remove)
            KEEP_ORIGINAL=false
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*|--*)
            echo -e "${RED}Unknown option $1${NC}"
            usage
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Check if files were provided
if [ $# -eq 0 ]; then
    echo -e "${RED}Error: No input files specified${NC}"
    echo ""
    # Look for supported video files in current directory
    video_files=$(find . -maxdepth 1 \( -iname "*.vob" -o -iname "*.aob" -o -iname "*.mkv" -o -iname "*.mp4" -o -iname "*.avi" -o -iname "*.mov" -o -iname "*.wmv" -o -iname "*.flv" -o -iname "*.webm" -o -iname "*.m4v" \) 2>/dev/null || true)
    if [ -n "$video_files" ]; then
        echo -e "${BLUE}Found these video files in current directory:${NC}"
        echo "$video_files"
        echo ""
        echo "Run with these files? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            set -- $video_files
        else
            usage
            exit 1
        fi
    else
        usage
        exit 1
    fi
fi

# Main execution
echo -e "${BLUE}=== Universal Audio Extractor ===${NC}"
echo ""

# Check dependencies
check_dependencies

# Create output directory
if [ ! -d "$OUTPUT_DIR" ]; then
    echo -e "${BLUE}Creating output directory: $OUTPUT_DIR${NC}"
    mkdir -p "$OUTPUT_DIR"
fi

# Process each file
total_files=$#
current_file=0

for file in "$@"; do
    current_file=$((current_file + 1))
    echo -e "${BLUE}Processing file $current_file of $total_files: $(basename "$file")${NC}"
    echo "----------------------------------------"
    
    # Check if file has supported extension
    if is_supported_format "$file"; then
        process_file "$file"
    else
        echo -e "${YELLOW}Warning: $file doesn't appear to be a supported video file${NC}"
        echo "Supported formats: VOB, AOB, MKV, MP4, AVI, MOV, WMV, FLV, WebM, M4V, 3GP, TS, MTS, M2TS"
        echo "Continue anyway? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            process_file "$file"
        else
            echo -e "${YELLOW}Skipping $file${NC}"
        fi
    fi
    
    echo ""
done

echo -e "${GREEN}=== Extraction Complete ===${NC}"
echo -e "${BLUE}Output directory: $OUTPUT_DIR${NC}"
echo -e "${BLUE}Files processed: $total_files${NC}"

# Show summary of extracted files
if [ -d "$OUTPUT_DIR" ]; then
    extracted_count=$(find "$OUTPUT_DIR" -type f | wc -l)
    echo -e "${GREEN}Audio files extracted: $extracted_count${NC}"
    
    if [ "$VERBOSE" = true ]; then
        echo ""
        echo -e "${BLUE}Extracted files:${NC}"
        ls -la "$OUTPUT_DIR"
    fi
fi
